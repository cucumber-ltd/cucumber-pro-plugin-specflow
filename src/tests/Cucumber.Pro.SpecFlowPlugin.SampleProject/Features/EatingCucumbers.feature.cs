// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Cucumber.Pro.SpecFlowPlugin.SampleProject.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "smoke")]
    public partial class EatingCucumbersFeature : Xunit.IClassFixture<EatingCucumbersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "EatingCucumbers.feature"
#line hidden
        
        public EatingCucumbersFeature(EatingCucumbersFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Eating cucumbers", null, ProgrammingLanguage.CSharp, new string[] {
                        "smoke"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Many cucumbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Eating cucumbers")]
        [Xunit.TraitAttribute("Description", "Many cucumbers")]
        [Xunit.TraitAttribute("Category", "sample")]
        public virtual void ManyCucumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Many cucumbers", new string[] {
                        "sample"});
#line 5
  this.ScenarioSetup(scenarioInfo);
#line 6
    testRunner.Given("I have already eaten 99 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.When("I eat 47 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
    testRunner.Then("I should have 52 cucumbers in my belly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Few cucumbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Eating cucumbers")]
        [Xunit.TraitAttribute("Description", "Few cucumbers")]
        public virtual void FewCucumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Few cucumbers", ((string[])(null)));
#line 10
  this.ScenarioSetup(scenarioInfo);
#line 11
    testRunner.Given("I have already eaten 5 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
    testRunner.When("I eat 2 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
    testRunner.Then("I should have 7 cucumbers in my belly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Few cucumbers outline")]
        [Xunit.TraitAttribute("FeatureTitle", "Eating cucumbers")]
        [Xunit.TraitAttribute("Description", "Few cucumbers outline")]
        [Xunit.InlineDataAttribute("5", "2", "7", new string[0])]
        [Xunit.InlineDataAttribute("6", "2", "8", new string[0])]
        public virtual void FewCucumbersOutline(string a, string b, string c, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Few cucumbers outline", exampleTags);
#line 15
  this.ScenarioSetup(scenarioInfo);
#line 16
    testRunner.Given("I have already eaten 5 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
    testRunner.When("I eat 2 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
    testRunner.Then("I should have 7 cucumbers in my belly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Undefined cucumbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Eating cucumbers")]
        [Xunit.TraitAttribute("Description", "Undefined cucumbers")]
        public virtual void UndefinedCucumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Undefined cucumbers", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
    testRunner.Given("I have already eaten 5 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
    testRunner.When("there is an undefined step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Pending cucumbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Eating cucumbers")]
        [Xunit.TraitAttribute("Description", "Pending cucumbers")]
        public virtual void PendingCucumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pending cucumbers", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
    testRunner.Given("I have already eaten 5 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
    testRunner.When("there is a pending step", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Skipped cucumbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Eating cucumbers")]
        [Xunit.TraitAttribute("Description", "Skipped cucumbers")]
        public virtual void SkippedCucumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Skipped cucumbers", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
    testRunner.Given("I have already eaten 5 cucumbers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 35
    testRunner.When("there is an error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
    testRunner.Then("the last step is skipped", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EatingCucumbersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EatingCucumbersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
